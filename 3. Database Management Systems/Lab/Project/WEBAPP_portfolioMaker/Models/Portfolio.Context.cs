//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WEBAPP_portfolioMaker.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Portfolio_makerEntities : DbContext
    {
        public Portfolio_makerEntities()
            : base("name=Portfolio_makerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<aboutus_setup> aboutus_setup { get; set; }
        public virtual DbSet<admin_users> admin_users { get; set; }
        public virtual DbSet<basic_setup> basic_setup { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<Experience> Experiences { get; set; }
        public virtual DbSet<Licence> Licences { get; set; }
        public virtual DbSet<Link_setup> Link_setup { get; set; }
        public virtual DbSet<Owner_Setup> Owner_Setup { get; set; }
        public virtual DbSet<personal_setup> personal_setup { get; set; }
        public virtual DbSet<ProjectDetail> ProjectDetails { get; set; }
        public virtual DbSet<Request_Manager> Request_Manager { get; set; }
        public virtual DbSet<skill> skills { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Theme> Themes { get; set; }
        public virtual DbSet<Theme_Customize> Theme_Customize { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<AboutInfo> AboutInfoes { get; set; }
        public virtual DbSet<Admin_WEB_Search> Admin_WEB_Search { get; set; }
        public virtual DbSet<Admininfo> Admininfoes { get; set; }
        public virtual DbSet<BasicInfo> BasicInfoes { get; set; }
        public virtual DbSet<CheckLisceneDetail> CheckLisceneDetails { get; set; }
        public virtual DbSet<CustomizeTheme> CustomizeThemes { get; set; }
        public virtual DbSet<ExperienceWorkHireDetail> ExperienceWorkHireDetails { get; set; }
        public virtual DbSet<JobSkill> JobSkills { get; set; }
        public virtual DbSet<LinkDetail> LinkDetails { get; set; }
        public virtual DbSet<LisceneceDetail> LisceneceDetails { get; set; }
        public virtual DbSet<OwnerInfo> OwnerInfoes { get; set; }
        public virtual DbSet<OwnerRequestCheck> OwnerRequestChecks { get; set; }
        public virtual DbSet<ProjectInfo> ProjectInfoes { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<ThemeSelect> ThemeSelects { get; set; }
        public virtual DbSet<ThemeSelection> ThemeSelections { get; set; }
        public virtual DbSet<UserContact> UserContacts { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<UserSetup> UserSetups { get; set; }
        public virtual DbSet<WebView> WebViews { get; set; }
        public virtual DbSet<WorkingExperience> WorkingExperiences { get; set; }
        public virtual DbSet<Main_WEB_Search> Main_WEB_Search { get; set; }
        public virtual DbSet<Details_ofWebView> Details_ofWebView { get; set; }
        public virtual DbSet<C_WEB_Search> C_WEB_Search { get; set; }
    
        [DbFunction("Portfolio_makerEntities", "FN_SEARCH_Profession")]
        public virtual IQueryable<FN_SEARCH_Profession_Result> FN_SEARCH_Profession(string iNPUT)
        {
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_SEARCH_Profession_Result>("[Portfolio_makerEntities].[FN_SEARCH_Profession](@INPUT)", iNPUTParameter);
        }
    
        [DbFunction("Portfolio_makerEntities", "FN_SEARCH_PROJECT")]
        public virtual IQueryable<FN_SEARCH_PROJECT_Result> FN_SEARCH_PROJECT(string iNPUT)
        {
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_SEARCH_PROJECT_Result>("[Portfolio_makerEntities].[FN_SEARCH_PROJECT](@INPUT)", iNPUTParameter);
        }
    
        [DbFunction("Portfolio_makerEntities", "FN_SEARCH_userNAME")]
        public virtual IQueryable<FN_SEARCH_userNAME_Result> FN_SEARCH_userNAME(string nAME)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_SEARCH_userNAME_Result>("[Portfolio_makerEntities].[FN_SEARCH_userNAME](@NAME)", nAMEParameter);
        }
    
        public virtual int f_Search_WebVeiw(string input, string sortBy, string table)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Search_WebVeiw", inputParameter, sortByParameter, tableParameter);
        }
    
        public virtual int ContactDetail(string iD, Nullable<int> contact_ID, string name, string email, string subject, string message)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var contact_IDParameter = contact_ID.HasValue ?
                new ObjectParameter("Contact_ID", contact_ID) :
                new ObjectParameter("Contact_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactDetail", iDParameter, contact_IDParameter, nameParameter, emailParameter, subjectParameter, messageParameter);
        }
    
        public virtual int CustomizeInsert(string theme, string iD, string font_Color, string background_Color, string fontStyle, Nullable<int> fontSize)
        {
            var themeParameter = theme != null ?
                new ObjectParameter("Theme", theme) :
                new ObjectParameter("Theme", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var font_ColorParameter = font_Color != null ?
                new ObjectParameter("Font_Color", font_Color) :
                new ObjectParameter("Font_Color", typeof(string));
    
            var background_ColorParameter = background_Color != null ?
                new ObjectParameter("Background_Color", background_Color) :
                new ObjectParameter("Background_Color", typeof(string));
    
            var fontStyleParameter = fontStyle != null ?
                new ObjectParameter("fontStyle", fontStyle) :
                new ObjectParameter("fontStyle", typeof(string));
    
            var fontSizeParameter = fontSize.HasValue ?
                new ObjectParameter("fontSize", fontSize) :
                new ObjectParameter("fontSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomizeInsert", themeParameter, iDParameter, font_ColorParameter, background_ColorParameter, fontStyleParameter, fontSizeParameter);
        }
    
        public virtual ObjectResult<Get_WebVeiw_Result> Get_WebVeiw()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_WebVeiw_Result>("Get_WebVeiw");
        }
    
        public virtual int InsertAboutInfo(string iD, string dob, string heading, string sub_Heading, string short_Description, string long_Description, string website)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var dobParameter = dob != null ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(string));
    
            var headingParameter = heading != null ?
                new ObjectParameter("Heading", heading) :
                new ObjectParameter("Heading", typeof(string));
    
            var sub_HeadingParameter = sub_Heading != null ?
                new ObjectParameter("Sub_Heading", sub_Heading) :
                new ObjectParameter("Sub_Heading", typeof(string));
    
            var short_DescriptionParameter = short_Description != null ?
                new ObjectParameter("Short_Description", short_Description) :
                new ObjectParameter("Short_Description", typeof(string));
    
            var long_DescriptionParameter = long_Description != null ?
                new ObjectParameter("Long_Description", long_Description) :
                new ObjectParameter("Long_Description", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAboutInfo", iDParameter, dobParameter, headingParameter, sub_HeadingParameter, short_DescriptionParameter, long_DescriptionParameter, websiteParameter);
        }
    
        public virtual int InsertbasicInfo(string iD, Nullable<int> liscence_Key, string job_title, string job_Description, string experties, string avatar_Icon, string theme)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var liscence_KeyParameter = liscence_Key.HasValue ?
                new ObjectParameter("Liscence_Key", liscence_Key) :
                new ObjectParameter("Liscence_Key", typeof(int));
    
            var job_titleParameter = job_title != null ?
                new ObjectParameter("Job_title", job_title) :
                new ObjectParameter("Job_title", typeof(string));
    
            var job_DescriptionParameter = job_Description != null ?
                new ObjectParameter("Job_Description", job_Description) :
                new ObjectParameter("Job_Description", typeof(string));
    
            var expertiesParameter = experties != null ?
                new ObjectParameter("Experties", experties) :
                new ObjectParameter("Experties", typeof(string));
    
            var avatar_IconParameter = avatar_Icon != null ?
                new ObjectParameter("Avatar_Icon", avatar_Icon) :
                new ObjectParameter("Avatar_Icon", typeof(string));
    
            var themeParameter = theme != null ?
                new ObjectParameter("Theme", theme) :
                new ObjectParameter("Theme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertbasicInfo", iDParameter, liscence_KeyParameter, job_titleParameter, job_DescriptionParameter, expertiesParameter, avatar_IconParameter, themeParameter);
        }
    
        public virtual int InsertRecord(string name, string iD, string pass, Nullable<int> liscence_Key)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var liscence_KeyParameter = liscence_Key.HasValue ?
                new ObjectParameter("Liscence_Key", liscence_Key) :
                new ObjectParameter("Liscence_Key", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRecord", nameParameter, iDParameter, passParameter, liscence_KeyParameter);
        }
    
        public virtual int InsetHistroy(string userID, string actionPerform, string log_, string before_log, string after_log, string date_time)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var actionPerformParameter = actionPerform != null ?
                new ObjectParameter("ActionPerform", actionPerform) :
                new ObjectParameter("ActionPerform", typeof(string));
    
            var log_Parameter = log_ != null ?
                new ObjectParameter("Log_", log_) :
                new ObjectParameter("Log_", typeof(string));
    
            var before_logParameter = before_log != null ?
                new ObjectParameter("Before_log", before_log) :
                new ObjectParameter("Before_log", typeof(string));
    
            var after_logParameter = after_log != null ?
                new ObjectParameter("After_log", after_log) :
                new ObjectParameter("After_log", typeof(string));
    
            var date_timeParameter = date_time != null ?
                new ObjectParameter("Date_time", date_time) :
                new ObjectParameter("Date_time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsetHistroy", userIDParameter, actionPerformParameter, log_Parameter, before_logParameter, after_logParameter, date_timeParameter);
        }
    
        public virtual int JobSkillInsert(string iD, string skills, string points)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("Skills", skills) :
                new ObjectParameter("Skills", typeof(string));
    
            var pointsParameter = points != null ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobSkillInsert", iDParameter, skillsParameter, pointsParameter);
        }
    
        public virtual int LinkDetailInsert(string iD, string social_Networks, string uRL)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var social_NetworksParameter = social_Networks != null ?
                new ObjectParameter("Social_Networks", social_Networks) :
                new ObjectParameter("Social_Networks", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LinkDetailInsert", iDParameter, social_NetworksParameter, uRLParameter);
        }
    
        public virtual int LisceneDetailInsert(string iD, Nullable<int> liscence_Key, string validity, string issue_Date, Nullable<int> liscenece_Status)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var liscence_KeyParameter = liscence_Key.HasValue ?
                new ObjectParameter("Liscence_Key", liscence_Key) :
                new ObjectParameter("Liscence_Key", typeof(int));
    
            var validityParameter = validity != null ?
                new ObjectParameter("Validity", validity) :
                new ObjectParameter("Validity", typeof(string));
    
            var issue_DateParameter = issue_Date != null ?
                new ObjectParameter("Issue_Date", issue_Date) :
                new ObjectParameter("Issue_Date", typeof(string));
    
            var liscenece_StatusParameter = liscenece_Status.HasValue ?
                new ObjectParameter("Liscenece_Status", liscenece_Status) :
                new ObjectParameter("Liscenece_Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LisceneDetailInsert", iDParameter, liscence_KeyParameter, validityParameter, issue_DateParameter, liscenece_StatusParameter);
        }
    
        public virtual int OwnerInfoInsert(string adminID, string adminPass, string request_Recieved, string contact_No, string userName, string email)
        {
            var adminIDParameter = adminID != null ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(string));
    
            var adminPassParameter = adminPass != null ?
                new ObjectParameter("AdminPass", adminPass) :
                new ObjectParameter("AdminPass", typeof(string));
    
            var request_RecievedParameter = request_Recieved != null ?
                new ObjectParameter("Request_Recieved", request_Recieved) :
                new ObjectParameter("Request_Recieved", typeof(string));
    
            var contact_NoParameter = contact_No != null ?
                new ObjectParameter("Contact_No", contact_No) :
                new ObjectParameter("Contact_No", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OwnerInfoInsert", adminIDParameter, adminPassParameter, request_RecievedParameter, contact_NoParameter, userNameParameter, emailParameter);
        }
    
        public virtual int PN_DELETE_GOBAL(string tab, string iNPUT)
        {
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_DELETE_GOBAL", tabParameter, iNPUTParameter);
        }
    
        public virtual int PN_DROP_GOBAL(string tYPE, string iNPUT)
        {
            var tYPEParameter = tYPE != null ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(string));
    
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_DROP_GOBAL", tYPEParameter, iNPUTParameter);
        }
    
        public virtual int PN_INSERT_GOBAL(string tab, string val, string cOL)
        {
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var valParameter = val != null ?
                new ObjectParameter("val", val) :
                new ObjectParameter("val", typeof(string));
    
            var cOLParameter = cOL != null ?
                new ObjectParameter("COL", cOL) :
                new ObjectParameter("COL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_INSERT_GOBAL", tabParameter, valParameter, cOLParameter);
        }
    
        public virtual int PN_SELECT_GOBAL(string tab)
        {
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_SELECT_GOBAL", tabParameter);
        }
    
        public virtual int PN_TRUCAT_GOBAL(string tab, string iNPUT)
        {
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_TRUCAT_GOBAL", tabParameter, iNPUTParameter);
        }
    
        public virtual int PN_UPDATE_GOBAL(string tab, string iNPUT)
        {
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var iNPUTParameter = iNPUT != null ?
                new ObjectParameter("INPUT", iNPUT) :
                new ObjectParameter("INPUT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PN_UPDATE_GOBAL", tabParameter, iNPUTParameter);
        }
    
        public virtual int ProjectDetailInsert(string iD, string project_Name, string pics_of_Project, string link_of_Projet, string description)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var project_NameParameter = project_Name != null ?
                new ObjectParameter("Project_Name", project_Name) :
                new ObjectParameter("Project_Name", typeof(string));
    
            var pics_of_ProjectParameter = pics_of_Project != null ?
                new ObjectParameter("Pics_of_Project", pics_of_Project) :
                new ObjectParameter("Pics_of_Project", typeof(string));
    
            var link_of_ProjetParameter = link_of_Projet != null ?
                new ObjectParameter("Link_of_Projet", link_of_Projet) :
                new ObjectParameter("Link_of_Projet", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectDetailInsert", iDParameter, project_NameParameter, pics_of_ProjectParameter, link_of_ProjetParameter, descriptionParameter);
        }
    
        public virtual int RequestInfoInsert(string adminID, string request_Recieved, string send_Request)
        {
            var adminIDParameter = adminID != null ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(string));
    
            var request_RecievedParameter = request_Recieved != null ?
                new ObjectParameter("Request_Recieved", request_Recieved) :
                new ObjectParameter("Request_Recieved", typeof(string));
    
            var send_RequestParameter = send_Request != null ?
                new ObjectParameter("Send_Request", send_Request) :
                new ObjectParameter("Send_Request", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RequestInfoInsert", adminIDParameter, request_RecievedParameter, send_RequestParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Themedata(string theme, string theme_Location, Nullable<int> customize)
        {
            var themeParameter = theme != null ?
                new ObjectParameter("Theme", theme) :
                new ObjectParameter("Theme", typeof(string));
    
            var theme_LocationParameter = theme_Location != null ?
                new ObjectParameter("Theme_Location", theme_Location) :
                new ObjectParameter("Theme_Location", typeof(string));
    
            var customizeParameter = customize.HasValue ?
                new ObjectParameter("Customize", customize) :
                new ObjectParameter("Customize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Themedata", themeParameter, theme_LocationParameter, customizeParameter);
        }
    
        public virtual int UserInfoInsert(string iD, string profile_Pic, string name, string wallpaper, string pofession, string adress, string contact_No, string email)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var profile_PicParameter = profile_Pic != null ?
                new ObjectParameter("Profile_Pic", profile_Pic) :
                new ObjectParameter("Profile_Pic", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var wallpaperParameter = wallpaper != null ?
                new ObjectParameter("Wallpaper", wallpaper) :
                new ObjectParameter("Wallpaper", typeof(string));
    
            var pofessionParameter = pofession != null ?
                new ObjectParameter("Pofession", pofession) :
                new ObjectParameter("Pofession", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var contact_NoParameter = contact_No != null ?
                new ObjectParameter("Contact_No", contact_No) :
                new ObjectParameter("Contact_No", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserInfoInsert", iDParameter, profile_PicParameter, nameParameter, wallpaperParameter, pofessionParameter, adressParameter, contact_NoParameter, emailParameter);
        }
    
        public virtual int WorkingExperiencingInsert(string iD, string category, string job_Title, string working_Since, string organization_Name, string working_Description)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var job_TitleParameter = job_Title != null ?
                new ObjectParameter("Job_Title", job_Title) :
                new ObjectParameter("Job_Title", typeof(string));
    
            var working_SinceParameter = working_Since != null ?
                new ObjectParameter("Working_Since", working_Since) :
                new ObjectParameter("Working_Since", typeof(string));
    
            var organization_NameParameter = organization_Name != null ?
                new ObjectParameter("Organization_Name", organization_Name) :
                new ObjectParameter("Organization_Name", typeof(string));
    
            var working_DescriptionParameter = working_Description != null ?
                new ObjectParameter("Working_Description", working_Description) :
                new ObjectParameter("Working_Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkingExperiencingInsert", iDParameter, categoryParameter, job_TitleParameter, working_SinceParameter, organization_NameParameter, working_DescriptionParameter);
        }
    
        public virtual ObjectResult<Get_WebVeiw_DetailsID_Result> Get_WebVeiw_DetailsID(string input)
        {
            var inputParameter = input != null ?
                new ObjectParameter("input", input) :
                new ObjectParameter("input", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_WebVeiw_DetailsID_Result>("Get_WebVeiw_DetailsID", inputParameter);
        }
    }
}
